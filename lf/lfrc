# interpreter for shell commands
set shell sh
set icons true


# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    # set -f
	pwd > /tmp/last_dir
    case $f in
        *.dta) open_stata $fx;;
        *.do) open_stata $fx;;
        *.tex) nvim $fx;;
        *.json) nvim $fx;;
        *.toml) nvim $fx;;
        *.py) nvim $fx;;
        *.sh) nvim $fx;;
        *.rs) nvim $fx;;
        *.go) nvim $fx;;
        *.sas) nvim $fx;;
        *.sql) nvim $fx;;
        *.ms) nvim $fx;;
        *.md) nvim $fx;;
        *.txt) nvim $fx;;
        *.csv) nvim $fx;;
        *.bib) nvim $fx;;
        *.sty) nvim $fx;;
        *.bst) nvim $fx;;
        *.R) nvim $fx;;
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        #*.pdf) okular $fx;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
        *.gz) gunzip -k $f;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd quitit ${{
	pwd > /tmp/last_dir
	lf -remote "send $id quit"
}}


# Delete function
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}
map D delete

# paste function
# cmd paste %{{
#     load=$(lf -remote 'load')
#     mode=$(echo "$load" | sed -n '1p')
#     list=$(echo "$load" | sed '1d')
#     if [ $mode = 'copy' ]; then
#         cp -R $list .
#     elif [ $mode = 'move' ]; then
#         mv $list .
#     fi
#     lf -remote 'send load'
#     lf -remote 'send clear'
# }}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
        *.gz) gunzip -k $f;;
    esac
}}

# remap some keys
push m-
map Q push '-q
# map pych cd /run/media/shinc/8C36A64636A6315E/PycharmProjects
map dots cd ~/dotfiles
map cdd cd /run/media/shinc/8C36A64636A6315E
# map nv nvim

#map p paste
map gd cd /run/media/shinc/D
map gx cd /home/shinc/Dropbox
map gh cd /home/shinc/
map ge cd /home/shinc/Desktop/example/
map gp cd /run/media/shinc/D/PycharmProjects/ticksizeregime/
map m

map mf mkfile
map md mkdir






